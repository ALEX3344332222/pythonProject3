from fastapi import FastAPI, Depends, HTTPException, UploadFile, File, Form, Cookie, Request, Response
from sqlalchemy.orm import Session
from database import SessionLocal, AudioTrack, create_or_update_user, User, Playlist, PlaylistTrack
from fastapi.responses import HTMLResponse, FileResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from starlette.requests import Request
from fastapi.staticfiles import StaticFiles
import os
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, TIT2, TPE1
import shutil
import uvicorn
import httpx
from starlette.middleware.sessions import SessionMiddleware
import base64


app = FastAPI()

templates = Jinja2Templates(directory="templates")
app.mount("/mp3_files", StaticFiles(directory="mp3_files"), name="mp3_files")
app.mount("/images", StaticFiles(directory="images"), name="images")
app.mount("/styles", StaticFiles(directory="styles"), name="styles")

app.add_middleware(SessionMiddleware, secret_key="your-very-secret-key")

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# –Ø–Ω–¥–µ–∫—Å OAuth –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
YANDEX_CLIENT_ID = '983a1fbebb3b4b6a851c645b7bb541bf'
YANDEX_CLIENT_SECRET = '690a8031ac6546d48d49542d82cff3eb'
YANDEX_REDIRECT_URI = 'http://localhost:8000/oauth.php?provider=yandex'
YANDEX_AUTH_URL = 'https://oauth.yandex.ru/authorize'
YANDEX_TOKEN_URL = 'https://oauth.yandex.ru/token'


@app.get("/", response_class=HTMLResponse)
async def music_library(request: Request, db: Session = Depends(get_db)):
    tracks = db.query(AudioTrack).all()
    return templates.TemplateResponse("index.html", {"request": request, "tracks": tracks, "session": request.session})

@app.get("/mp3/{track_id}")
def download_mp3(track_id: int, db: Session = Depends(get_db)):
    track = db.query(AudioTrack).filter(AudioTrack.track_id == track_id).first()

    if not track:
        raise HTTPException(status_code=404, detail="MP3 file not found")

    file_path = track.file_path

    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="File not found")

    return FileResponse(file_path, media_type="audio/mpeg", filename=track.title)

@app.post("/upload")
async def upload_file(file: UploadFile = File(...), db: Session = Depends(get_db)):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    file_location = f"mp3_files/{file.filename}"
    with open(file_location, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ MP3
    audio = MP3(file_location, ID3=ID3)

    title = audio.get('TIT2', 'Unknown Title').text[0] if audio.get('TIT2') else 'Unknown Title'
    artist = audio.get('TPE1', 'Unknown Artist').text[0] if audio.get('TPE1') else 'Unknown Artist'

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    image_data = None
    if 'APIC:' in audio:
        image_data = audio['APIC:'].data

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    image_path = None
    if image_data:
        image_path = f"images/{file.filename}.jpg"
        with open(image_path, "wb") as img_file:
            img_file.write(image_data)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    new_track = AudioTrack(
        title=title,
        artist=artist,
        file_path=f"/mp3_files/{file.filename}",
        file_path_img=f"/images/{file.filename}.jpg" if image_path else None
    )
    db.add(new_track)
    db.commit()
    db.refresh(new_track)

    return {"status": "success", "message": "File uploaded successfully"}
@app.get("/auth/login")
async def login():
    auth_url = (
        f"{YANDEX_AUTH_URL}?response_type=code&client_id={YANDEX_CLIENT_ID}&redirect_uri={YANDEX_REDIRECT_URI}"
    )
    return RedirectResponse(url=auth_url)


@app.get("/oauth.php")
async def oauth_callback(request: Request, db: Session = Depends(get_db)):
    code = request.query_params.get('code')
    if not code:
        raise HTTPException(status_code=400, detail="Code not found in request")

    async with httpx.AsyncClient() as client:
        response = await client.post(
            YANDEX_TOKEN_URL,
            data={
                'grant_type': 'authorization_code',
                'code': code,
                'redirect_uri': YANDEX_REDIRECT_URI,
                'client_id': YANDEX_CLIENT_ID,
                'client_secret': YANDEX_CLIENT_SECRET,
                'device_id': '983a1fbebb3b4b6a851c645b7bb541bf',
            },
        )

        if response.status_code == 200:
            token_data = response.json()
            access_token = token_data.get('access_token')

            request.session['access_token'] = access_token

            user_info_response = await client.get(
                'https://login.yandex.ru/info',
                headers={'Authorization': f'Bearer {access_token}'}
            )

            if user_info_response.status_code == 200:
                user_info = user_info_response.json()

                print(user_info)
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                create_or_update_user(db, user_info)
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user_id –≤ —Å–µ—Å—Å–∏–∏
                request.session['user_id'] = user_info['id']
                request.session['avatar_url'] = user_info['default_avatar_id']
                request.session['real_name'] = user_info['real_name']
                print(request.session)
                # –í–µ—Ä–Ω—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                return RedirectResponse(url="/")
            else:
                raise HTTPException(status_code=400, detail="Failed to obtain user info")

        else:
            raise HTTPException(status_code=400, detail="Failed to obtain access token")


@app.get("/auth/logout")
async def logout(request: Request):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏
    access_token = request.session.get('access_token')

    # –ü–µ—á–∞—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"Access Token: {access_token}")

    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ client_id –∏ client_secret –≤ Base64
    basic_auth_str = f"{YANDEX_CLIENT_ID}:{YANDEX_CLIENT_SECRET}"
    basic_auth_bytes = base64.b64encode(basic_auth_str.encode('utf-8')).decode('utf-8')

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –æ—Ç–∑—ã–≤–∞–µ–º –µ–≥–æ
    if access_token:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                'https://oauth.yandex.ru/revoke_token',
                headers={
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Authorization': f'Basic {basic_auth_bytes}',
                },
                data={
                    'access_token': access_token,
                    # –ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º device_id
                    'device_id': YANDEX_CLIENT_ID,
                }
            )

            if response.status_code == 200:
                print('–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω')
            else:
                print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ —Ç–æ–∫–µ–Ω–∞:', response.json())

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    response = RedirectResponse(url="/")

    # –£–¥–∞–ª—è–µ–º –∫—É–∫–∏
    response.delete_cookie('session')

    # –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–µ—Å—Å–∏–∏
    request.session.clear()

    return response


@app.post("/add-to-playlist")
async def add_to_playlist(request: Request, db: Session = Depends(get_db), track_id: int = Form(...)):
    user_id = request.session.get('user_id')
    if not user_id:
        raise HTTPException(status_code=401, detail="Not authenticated, bro üò¨")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç "My_music" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    playlist = db.query(Playlist).filter(Playlist.name == "My_music").first()

    if not playlist:
        playlist = Playlist(name="My_music")
        db.add(playlist)
        db.commit()
        db.refresh(playlist)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–∫ —É–∂–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_entry = db.query(PlaylistTrack).filter(
        PlaylistTrack.playlist_id == playlist.playlist_id,
        PlaylistTrack.track_id == track_id,
        PlaylistTrack.user_id == user_id
    ).first()

    if existing_entry:
        return {"message": "–¢—Ä–µ–∫ —É–∂–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ 'My_music'", "already_exists": True}

    playlist_track = PlaylistTrack(
        playlist_id=playlist.playlist_id,
        track_id=track_id,
        user_id=user_id
    )
    db.add(playlist_track)
    db.commit()

    return {"message": "–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç 'My_music'", "already_exists": False}

@app.get("/my-music", response_class=HTMLResponse)
async def my_music(request: Request, db: Session = Depends(get_db)):
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–µ—Å—Å–∏–∏
    user_id = request.session.get("user_id")
    if not user_id:
        raise HTTPException(status_code=401, detail="User not authenticated")

    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç "My_music" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    playlist = db.query(Playlist).filter(Playlist.name == "My_music").first()

    if playlist:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –ø–ª–µ–π–ª–∏—Å—Ç
        tracks = db.query(AudioTrack).join(PlaylistTrack).filter(
            PlaylistTrack.playlist_id == playlist.playlist_id,
            PlaylistTrack.user_id == user_id
        ).all()
    else:
        tracks = []  # –ï—Å–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML-–æ—Ç–≤–µ—Ç —Å —Ç—Ä–µ–∫–∞–º–∏
    return templates.TemplateResponse("my_music.html", {"request": request, "tracks": tracks})


@app.post("/remove-from-playlist")
async def remove_from_playlist(request: Request, db: Session = Depends(get_db), track_id: int = Form(...)):
    user_id = request.session.get('user_id')
    if not user_id:
        raise HTTPException(status_code=401, detail="Not authenticated, bro üò¨")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç "My_music" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    playlist = db.query(Playlist).filter(Playlist.name == "My_music").first()

    if not playlist:
        raise HTTPException(status_code=404, detail="Playlist 'My_music' not found")

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–µ–∫–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ
    playlist_track = db.query(PlaylistTrack).filter(
        PlaylistTrack.playlist_id == playlist.playlist_id,
        PlaylistTrack.track_id == track_id,
        PlaylistTrack.user_id == user_id
    ).first()

    if not playlist_track:
        return {"message": "–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ 'My_music'", "not_found": True}

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–µ–∫–µ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    db.delete(playlist_track)
    db.commit()

    return {"message": "–¢—Ä–µ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ 'My_music'", "not_found": False}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)